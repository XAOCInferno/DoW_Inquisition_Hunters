----------------------------------------
-- File: 'almonesstactic.ai'
-- Edited by Gambit @ 24.12.2018

class 'AlmonessTactic' (WitchHuntersInfantryTactic)

Almoness = {}

function AlmonessTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Almoness Tactic")

	-- Squad is transportable
	self.m_iTransportable = 1	--Rhino
	-- Squads is able to deepstrike	
	self.m_iDeepStrikeBlueprintID = cpu_manager.stats:GetBuildingID("witch_hunters_armorium")

	-- Engineer Tactic Settings, modify as required
	self.iBusy = g_iGMT
	self.iSabotageAbility = g_iGMT
	self.iRepairVehicleRange = 40   --> The range within which the squad will perform the vehicle repairs
	self.iRepairSuperVehiclesWhenInCombat = true  --> Will repair super vehicles, even if in combat
	self.iRepairStrongVehiclesWhenInCombat = true  --> Will also repair super vehicles if true
	self.isBuildingsRepairer  = true  --> Will also repair nearby structures if true
	self.isBuildingsAssistant  = true  --> Will also help build nearby unfinished structures if true
	self.iFixBuildingsRange = 30  --> The range within which the squad will perform building duties
end


function AlmonessTactic:InitAbilities()
	if Almoness.restoration_id == nil then
		Almoness.restoration_id = cpu_manager.stats:GetAbilityID( "witch_hunters_rites_of_restoration" )
	end
end


function AlmonessTactic:DoAbilities()
	if self.squad_ai:CanDoAbility(Almoness.restoration_id) then
		local oVehicleToRepair = self:GetDamagedVehicleWithin(16)
		if (oVehicleToRepair ~= nil) then
			self.squad_ai:DoSpecialAbilitySquad(Almoness.restoration_id, oVehicleToRepair:GetSquad())
		end
	end
end



-----------------------------------------
-- Update tactic for dual-duty squads  --
-----------------------------------------

function AlmonessTactic:Update()

	-- State machine
	if not Tactic.Update( self ) then
		return false
	end

	-- Check if locked, and not attacked while being so, so that to fulfil his tasks
	if (self.squad_ai:IsLocked() and not self.squad_ai:WasRecentlyHurt()) then
		return true
   	end

	-- Upgrade weapons
	self:Upgrade()

	self:SyncSubState()

	self:CheckForBroken()

	-- If not already in substate
	if (self.stateID == Tactic.StateID.NoState) then
	   
		-- Check dance mode
		if (CpuManager.AISettings.iDancing == 2) then
		 	self:CheckForDeath()
			if (self.stateID == Tactic.StateID.NoState) then
				self:CheckForDance()
				if (self.stateID == Tactic.StateID.NoState) then
					self:CheckForStealthTroops()
				end
			end
		elseif (CpuManager.AISettings.iDancing == 1 and g_iGMT > self.m_iDancing + 10) then
			self:CheckForDeath()
			if (self.stateID == Tactic.StateID.NoState) then
				self:CheckForDance()
				if (self.stateID == Tactic.StateID.NoState) then
					self:CheckForStealthTroops()
				end
			end
		end
	end

	-- Check stance
	self:UpdateStance()

	-- Perform engineer duties
	self:DoEngineerDuties()

	-- If no tasks after a while, or attacked while building a structure, engage closest enemy.
	if (not (self:IsMoving() or self.squad_ai:IsInCombat()) and g_iGMT > self.iBusy + 6)
	or (self.squad_ai:IsBuilding() ~= 0 and self.squad_ai:WasRecentlyHurt()) then
		self:EngageClosestEnemyIfNeeded()
	end

	-- Do abilities if available
	self:DoAbilities()

	-- Return success
	return true
end


------------------------------------------------
-- Code for dual-duty squads (also engineers) --
------------------------------------------------

-- Moves the squad to engage the enemy. Usually called if idle, or attacked during building a structure
function AlmonessTactic:EngageClosestEnemyIfNeeded()
	-- Define squad filter functor
	local oSquadFilter = function( oSquadAI )
		return oSquadAI:IsInCombat()
	end
	-- Get closest enemy squad to engage
    local oEnemySquad = cpu_manager:FindClosestEnemy(self.squad_ai:GetPosition(), 1512, oSquadFilter)
    if (oEnemySquad ~= nil) then
		local targetPosition = oEnemySquad:GetPosition()
		if Ability.Filters.CloseHurt(targetPosition, 40, 1) ~= nil then
			self.squad_ai:DoMove(targetPosition)
		end
	end
end


-- Performs the repair and building tasks
function AlmonessTactic:DoEngineerDuties()
	-- Assisting boolean, so that not to call GetDmgdOrUnfnsdBuildingWithin twice
	local iCheck = true

	-- Try to repair a nearby damaged vehicle. If no vehicle, find a damaged building
	if self.squad_ai:CanRepair() then
		-- First, find the closest vehicle that can be repaired
		local oVehicleToRepair = self:GetDamagedVehicleWithin(self.iRepairVehicleRange)
		if (oVehicleToRepair ~= nil) then
			-- Prefer to repair a powerful vehicle, even in battle
			local superVehicle = false
			local strongVehicle = false
			if self.iRepairSuperVehiclesWhenInCombat then
				local vStats = oVehicleToRepair:GetStats()
				if  vStats ~= nil then
					local vClass = vStats:GetClass()
					if vClass ~= nil then
						if vClass == UnitStatsAI.UC_VehicleHigh then
							superVehicle = true
						end
					end
				end
			elseif self.iRepairStrongVehiclesWhenInCombat then
				local vStats = oVehicleToRepair:GetStats()
				if  vStats ~= nil then
					local vClass = vStats:GetClass()
					if vClass ~= nil then
						if vClass == UnitStatsAI.UC_VehicleMed then
							strongVehicle = true
						end
					end
				end
			end
			if not self.squad_ai:IsInCombat() or superVehicle or strongVehicle then
				aitrace("EngineerTactic: Repairing vehicle...")
				self.squad_ai:DoRepairSquad(oVehicleToRepair)
				self.iBusy = g_iGMT
				return true
			end
		end
		-- Then, find the closest building that can be repaired
		if self.isBuildingsRepairer then
			self:GetDmgdOrUnfnsdBuildingWithin(self.iFixBuildingsRange)
			iCheck = false
			if not self.squad_ai:IsInCombat() then
				local oBuildingToRepair = self:GetDamagedBuilding()
				if (oBuildingToRepair ~= nil) then
					aitrace("EngineerTactic: Repairing building...")
					self.squad_ai:DoRepairBase(oBuildingToRepair)
					self.iBusy = g_iGMT
					return true
				end
			end
		end
	end
	-- Then, try to help finish a building
	if self.isBuildingsAssistant then
		if self.squad_ai:IsEngineer() and not self.squad_ai:IsInCombat() then
			if iCheck then
				self:GetDmgdOrUnfnsdBuildingWithin(self.iFixBuildingsRange)
			end
			local oBuildingToFinish = self:GetUnfinishedBuilding()
			if (oBuildingToFinish ~= nil) then
				aitrace("EngineerTactic: Help finishing a building...")
				self.squad_ai:DoFinishBuilding(oBuildingToFinish)
				self.iBusy = g_iGMT
				return true
			end
		end
	end
end


-- Called directly to find an ally repairable and damaged squad within range.
function AlmonessTactic:GetDamagedVehicleWithin(iRange)
local iEngineerSquadPosition = self.squad_ai:GetPosition()
for oPlayer in cpu_manager.stats:GetPlayerStats() do
	if not oPlayer:IsPlayerDead() then
		if not cpu_manager.player_stats:IsEnemy(oPlayer) then
			for oSquad in oPlayer:GetSquads() do
				if oSquad:IsValid() then
					if oSquad:CanBeRepaired() and oSquad:GetHealthPercentage() < 1.0 then
						if distance_sqr(oSquad:GetPosition(),iEngineerSquadPosition) < iRange*iRange then 
							return oSquad
						end
					end
				end
			end
		end
	end
end
return nil
end


-- Called indirectly, to find an ally repairable and damaged building, or an unfinished within range.
function AlmonessTactic:GetDmgdOrUnfnsdBuildingWithin(iRange)
self.damagedBuilding = nil
self.unfinishedBuilding = nil
local iEngineerSquadPosition = self.squad_ai:GetPosition()
for oPlayer in cpu_manager.stats:GetPlayerStats() do
	if (not oPlayer:IsPlayerDead()) then
		if (not cpu_manager.player_stats:IsEnemy(oPlayer)) then
			for oBuilding in oPlayer:GetBases() do
				if oBuilding:IsValid() then
					if distance_sqr(oBuilding:GetPosition(),iEngineerSquadPosition) < iRange*iRange then
						if (self.isBuildingsRepairer and oBuilding:CanBeRepaired() and oBuilding:GetHealthPercentage() < 1.0) then
							self.damagedBuilding = oBuilding
							return
						elseif (self.isBuildingsAssistant and not oBuilding:IsConstructionDone()) then
							self.unfinishedBuilding = oBuilding:GetEntity()
							return
						end
					end
				end
			end
		end
	end
end
end


function AlmonessTactic:GetDamagedBuilding()
	return self.damagedBuilding
end


function AlmonessTactic:GetUnfinishedBuilding()
	return self.unfinishedBuilding
end

------------------------------------------------------------------------------------------
